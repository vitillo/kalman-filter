//
// /home/vitillo/Dropbox/ispc_test/include/KalmanFilter.ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#ifndef ISPC__HOME_VITILLO_DROPBOX_ISPC_TEST_INCLUDE_KALMANFILTER_ISPC_H
#define ISPC__HOME_VITILLO_DROPBOX_ISPC_TEST_INCLUDE_KALMANFILTER_ISPC_H

#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus
#ifndef __ISPC_STRUCT_TrackHits__
#define __ISPC_STRUCT_TrackHits__
struct TrackHits {
    double * normal;
    double * ref;
    double * err_locX;
    double * err_locY;
    double * cov_locXY;
    double * Jacobi;
    int32_t * is2Dim;
};
#endif

#ifndef __ISPC_STRUCT_KalmanFilterParameter__
#define __ISPC_STRUCT_KalmanFilterParameter__
struct KalmanFilterParameter {
    int32_t max_hit_storage;
    int32_t max_track_storage;
    int32_t max_hit_count;
    int32_t ntracks;
    int32_t * hit_count;
    struct TrackHits * hits;
};
#endif

#ifndef __ISPC_STRUCT_KalmanFilter__
#define __ISPC_STRUCT_KalmanFilter__
struct KalmanFilter {
    double * C_k1;
    double * C_k;
    double * Dim1_H;
    double * Dim2_H;
    double * Dim1_K;
    double * Dim2_K;
    double * Dim5_K;
    double * Dim1_V;
    double * Dim2_V;
    double * Dim1_m;
    double * Dim2_m;
    double * P_k1;
    double * P_k;
    double * M55_tmp;
    double * M15_tmp;
    double * M11_tmp;
    double * M55_tmp1;
    double * M25_tmp;
    double * M22_tmp;
    double * v2_tmp;
    double * v5_tmp;
    double * Inverse;
    int32_t ntracks;
    int32_t max_track_storage;
};
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && !defined(__ISPC_NO_EXTERN_C)
extern "C" {
#endif // __cplusplus
    extern void add_test(double * A, double * B, double * C, int32_t M, int32_t N, int32_t num);
    extern void divide_test(double * A, double * B, double * C, int32_t M, int32_t N, int32_t num);
    extern void foo(struct TrackHits * __anon_parameter_0, struct KalmanFilterParameter * __anon_parameter_1);
    extern void gemm_test(int32_t transpose_A, int32_t transpose_B, double * A, double * B, double * C, int32_t M, int32_t N, int32_t K, int32_t num);
    extern void identity_test(double * A, int32_t M, int32_t num);
    extern void inverse2x2_test(double * A, double * B, int32_t num);
    extern void multiply_test(double * A, double * B, double * C, int32_t M, int32_t N, int32_t num);
    extern void startFilter(struct KalmanFilter * filter, struct KalmanFilterParameter * param);
    extern void subtract_test(double * A, double * B, double * C, int32_t M, int32_t N, int32_t num);
#if defined(__cplusplus) && !defined(__ISPC_NO_EXTERN_C)
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus

#endif // ISPC__HOME_VITILLO_DROPBOX_ISPC_TEST_INCLUDE_KALMANFILTER_ISPC_H
